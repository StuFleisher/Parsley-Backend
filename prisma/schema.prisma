generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ingredient {
  ingredientId    Int     @id @default(autoincrement())
  step            Int
  amount          String  @db.VarChar(500) @default("")
  description     String  @db.VarChar(500) @default("")
  instructionRef  String  @db.VarChar(500) @default("")
  steps           Step    @relation(fields: [step], references: [stepId], onDelete: Cascade, onUpdate: NoAction)
  @@map("ingredients")
}

model Recipe {
  recipeId          Int                 @id @default(autoincrement())
  name              String              @db.VarChar(200)
  description       String              @db.VarChar(1000)
  sourceUrl         String              @map("source_url") @default("")
  imageUrl          String              @map("image_url") @default("https://sf-parsley.s3.amazonaws.com/recipeImage/parsley.jpg")
  sourceName        String              @map("source_name") @db.VarChar(50)
  steps             Step[]
  ownerUser         User                @relation(fields: [owner], references: [username])
  owner             String
  cookbooks         CookbookEntry[]
  @@map("recipes")
}

model Step {
  stepId        Int           @id @default(autoincrement())
  recipeId      Int           @map("recipe_id")
  stepNumber    Int           @map("step_number")
  instructions  String        @db.VarChar(5000)
  ingredients   Ingredient[]
  recipe        Recipe        @relation(fields: [recipeId], references: [recipeId], onDelete: Cascade, onUpdate: NoAction)
  @@map("steps")
}

model User {
  userId        Int                @id @default(autoincrement())
  username      String             @db.VarChar(25) @unique
  password      String             @db.VarChar(200)
  firstName     String             @db.VarChar(100)
  lastName      String             @db.VarChar(100)
  email         String             @db.VarChar(100) @unique
  isAdmin       Boolean
  recipes       Recipe[]
  cookbook      CookbookEntry[]
  @@map("users")
}

model CookbookEntry {
  cookbookId        Int          @id @default(autoincrement())
  user              User         @relation(fields: [username], references: [username], onDelete: Cascade)
  username          String
  recipe            Recipe       @relation(fields: [recipeId], references: [recipeId], onDelete: Cascade)
  recipeId          Int
  @@map("cookbooks")
}